diff --git a/include/double_vec_ops.h b/include/double_vec_ops.h
deleted file mode 100644
index 13ff6cc..0000000
--- a/include/double_vec_ops.h
+++ /dev/null
@@ -1,105 +0,0 @@
-/*
-   Max-Planck-Gesellschaft zur Förderung der Wissenschaften e.V. (MPG) is
-   holder of all proprietary rights on this computer program.
-   You can only use this computer program if you have closed
-   a license agreement with MPG or you get the right to use the computer
-   program from someone who is authorized to grant you that right.
-   Any use of the computer program without a valid license is prohibited and
-   liable to prosecution.
-
-   Copyright©2019 Max-Planck-Gesellschaft zur Förderung
-   der Wissenschaften e.V. (MPG). acting on behalf of its Max Planck Institute
-   for Intelligent Systems and the Max Planck Institute for Biological
-   Cybernetics. All rights reserved.
-
-   Contact: ps-license@tuebingen.mpg.de
-*/
-
-#ifndef DOUBLE_VEC_OPS_H
-#define DOUBLE_VEC_OPS_H
-
-#include "cuda_runtime.h"
-
-inline __host__ __device__ double2 operator+(double2 a, double2 b) {
-    return make_double2(a.x + b.x, a.y + b.y);
-}
-
-
-inline __host__ __device__ double3 operator+(double3 a, double3 b) {
-    return make_double3(a.x + b.x, a.y + b.y, a.z + b.z);
-}
-
-inline __host__ __device__ void operator/=(double2 &a, double2 b) {
-    a.x /= b.x;
-    a.y /= b.y;
-}
-
-inline __host__ __device__ double2 operator/(double2 a, double b) {
-    return make_double2(a.x / b, a.y / b);
-}
-
-inline __host__ __device__ double3 operator/(double3 a, double3 b) {
-    return make_double3(a.x / b.x, a.y / b.y, a.z / b.z);
-}
-
-inline __host__ __device__ void operator/=(double3 &a, double3 b) {
-    a.x /= b.x;
-    a.y /= b.y;
-    a.z /= b.z;
-}
-
-inline __host__ __device__ double3 operator/(double3 a, double b) {
-    return make_double3(a.x / b, a.y / b, a.z / b);
-}
-
-inline __host__ __device__ double dot(double2 a, double2 b) {
-    return a.x * b.x + a.y * b.y;
-}
-
-inline __host__ __device__ double dot(double3 a, double3 b) {
-    return a.x * b.x + a.y * b.y + a.z * b.z;
-}
-
-inline __host__ __device__ double3 cross(double3 a, double3 b)
-{
-    return make_double3(a.y*b.z - a.z*b.y, a.z*b.x - a.x*b.z, a.x*b.y - a.y*b.x);
-}
-
-inline __host__ __device__ double2 operator-(double2 a, double2 b)
-{
-    return make_double2(a.x - b.x, a.y - b.y);
-}
-inline __host__ __device__ void operator-=(double2 &a, double2 b)
-{
-    a.x -= b.x;
-    a.y -= b.y;
-}
-inline __host__ __device__ double2 operator-(double2 a, double b)
-{
-    return make_double2(a.x - b, a.y - b);
-}
-inline __host__ __device__ double2 operator-(double b, double2 a)
-{
-    return make_double2(b - a.x, b - a.y);
-}
-
-inline __host__ __device__ double3 operator-(double3 a, double3 b)
-{
-    return make_double3(a.x - b.x, a.y - b.y, a.z - b.z);
-}
-inline __host__ __device__ void operator-=(double3 &a, double3 b)
-{
-    a.x -= b.x;
-    a.y -= b.y;
-    a.z -= b.z;
-}
-inline __host__ __device__ double3 operator-(double3 a, double b)
-{
-    return make_double3(a.x - b, a.y - b, a.z - b);
-}
-inline __host__ __device__ double3 operator-(double b, double3 a)
-{
-    return make_double3(b - a.x, b - a.y, b - a.z);
-}
-
-#endif // ifndef DOUBLE_VEC_OPS_H
diff --git a/src/bvh.cpp b/src/bvh.cpp
index 8cee97c..3dfea5e 100644
--- a/src/bvh.cpp
+++ b/src/bvh.cpp
@@ -22,6 +22,10 @@
 void bvh_cuda_forward(at::Tensor triangles, at::Tensor* collision_tensor_ptr,
         int max_collisions = 16);
 
+#ifndef AT_CHECK
+#define AT_CHECK TORCH_CHECK
+#endif
+
 #define CHECK_CUDA(x) AT_CHECK(x.type().is_cuda(), #x " must be a CUDA tensor")
 #define CHECK_CONTIGUOUS(x) AT_CHECK(x.is_contiguous(), #x " must be contiguous")
 #define CHECK_INPUT(x) CHECK_CUDA(x); CHECK_CONTIGUOUS(x)
diff --git a/src/bvh_cuda_op.cu b/src/bvh_cuda_op.cu
index 0a8622a..7121c76 100644
--- a/src/bvh_cuda_op.cu
+++ b/src/bvh_cuda_op.cu
@@ -1,20 +1,3 @@
-/*
- Max-Planck-Gesellschaft zur Förderung der Wissenschaften e.V. (MPG) is
- holder of all proprietary rights on this computer program.
- You can only use this computer program if you have closed
- a license agreement with MPG or you get the right to use the computer
- program from someone who is authorized to grant you that right.
- Any use of the computer program without a valid license is prohibited and
- liable to prosecution.
-
- Copyright©2019 Max-Planck-Gesellschaft zur Förderung
- der Wissenschaften e.V. (MPG). acting on behalf of its Max Planck Institute
- for Intelligent Systems and the Max Planck Institute for Biological
- Cybernetics. All rights reserved.
-
- Contact: ps-license@tuebingen.mpg.de
-*/
-
 #include <ATen/ATen.h>
 
 #include <cuda.h>
@@ -37,52 +20,7 @@
 #include "double_vec_ops.h"
 #include "helper_math.h"
 
-// Size of the stack used to traverse the Bounding Volume Hierarchy tree
-#ifndef STACK_SIZE
-#define STACK_SIZE 64
-#endif /* ifndef STACK_SIZE */
-
-// Upper bound for the number of possible collisions
-#ifndef MAX_COLLISIONS
-#define MAX_COLLISIONS 16
-#endif
-
-#ifndef EPSILON
-#define EPSILON 1e-16
-#endif /* ifndef EPSILON */
-
-// Number of threads per block for CUDA kernel launch
-#ifndef NUM_THREADS
-#define NUM_THREADS 128
-#endif
-
-#ifndef COLLISION_ORDERING
-#define COLLISION_ORDERING 1
-#endif
-
-#ifndef FORCE_INLINE
-#define FORCE_INLINE 1
-#endif /* ifndef FORCE_INLINE */
-
-#ifndef ERROR_CHECKING
-#define ERROR_CHECKING 1
-#endif /* ifndef ERROR_CHECKING */
-
-// Macro for checking cuda errors following a cuda launch or api call
-#if ERROR_CHECKING == 1
-#define cudaCheckError()                                                       \
-  {                                                                            \
-    cudaDeviceSynchronize();                                                   \
-    cudaError_t e = cudaGetLastError();                                        \
-    if (e != cudaSuccess) {                                                    \
-      printf("Cuda failure %s:%d: '%s'\n", __FILE__, __LINE__,                 \
-             cudaGetErrorString(e));                                           \
-      exit(0);                                                                 \
-    }                                                                          \
-  }
-#else
-#define cudaCheckError()
-#endif
+
 
 typedef unsigned int MortonCode;
 
@@ -202,8 +140,8 @@ template <typename T> struct MergeAABB {
 public:
   __host__ __device__ MergeAABB(){};
 
-  // Create an operator Struct that will be used by thrust::reduce
-  // to calculate the bounding box of the scene.
+  
+  
   __host__ __device__ AABB<T> operator()(const AABB<T> &bbox1,
                                          const AABB<T> &bbox2) {
     return bbox1 + bbox2;
@@ -249,7 +187,7 @@ __global__ void ComputeTriBoundingBoxes(Triangle<T> *triangles,
 template <typename T>
 __device__ inline vec2<T> isect_interval(const vec3<T> &sep_axis,
                                          const Triangle<T> &tri) {
-  // Check the separating sep_axis versus the first point of the triangle
+  
   T proj_distance = dot(sep_axis, tri.v0);
 
   vec2<T> interval;
@@ -271,13 +209,13 @@ template <typename T>
 __device__ inline bool TriangleTriangleOverlap(const Triangle<T> &tri1,
                                                const Triangle<T> &tri2,
                                                const vec3<T> &sep_axis) {
-  // Calculate the projected segment of each triangle on the separating
-  // axis.
+  
+  
   vec2<T> tri1_interval = isect_interval(sep_axis, tri1);
   vec2<T> tri2_interval = isect_interval(sep_axis, tri2);
 
-  // In order for the triangles to overlap then there must exist an
-  // intersection of the two intervals
+  
+  
   return (tri1_interval.x <= tri2_interval.y) &&
          (tri1_interval.y >= tri2_interval.x);
 }
@@ -285,20 +223,20 @@ __device__ inline bool TriangleTriangleOverlap(const Triangle<T> &tri1,
 template <typename T>
 __device__ bool TriangleTriangleIsectSepAxis(const Triangle<T> &tri1,
                                              const Triangle<T> &tri2) {
-  // Calculate the edges and the normal for the first triangle
+  
   vec3<T> tri1_edge0 = tri1.v1 - tri1.v0;
   vec3<T> tri1_edge1 = tri1.v2 - tri1.v0;
   vec3<T> tri1_edge2 = tri1.v2 - tri1.v1;
   vec3<T> tri1_normal = cross(tri1_edge1, tri1_edge2);
 
-  // Calculate the edges and the normal for the second triangle
+  
   vec3<T> tri2_edge0 = tri2.v1 - tri2.v0;
   vec3<T> tri2_edge1 = tri2.v2 - tri2.v0;
   vec3<T> tri2_edge2 = tri2.v2 - tri2.v1;
   vec3<T> tri2_normal = cross(tri2_edge1, tri2_edge2);
 
-  // If the triangles are coplanar then the first 11 cases are all the same,
-  // since the cross product will just give us the normal vector
+  
+  
   vec3<T> axes[17] = {
       tri1_normal,
       tri2_normal,
@@ -311,9 +249,9 @@ __device__ bool TriangleTriangleIsectSepAxis(const Triangle<T> &tri1,
       cross(tri1_edge2, tri2_edge0),
       cross(tri1_edge2, tri2_edge1),
       cross(tri1_edge2, tri2_edge2),
-      // Triangles are coplanar
-      // Check the axis created by the normal of the triangle and the edges of
-      // both triangles.
+      
+      
+      
       cross(tri1_normal, tri1_edge0),
       cross(tri1_normal, tri1_edge1),
       cross(tri1_normal, tri1_edge2),
@@ -331,12 +269,12 @@ __device__ bool TriangleTriangleIsectSepAxis(const Triangle<T> &tri1,
   return isect_flag;
 }
 
-// Returns true if the triangles share one or multiple vertices
+
 template <typename T>
 __device__
-#if FORCE_INLINE == 1
+
     __forceinline__
-#endif
+
 bool
 shareVertex(const Triangle<T> &tri1, const Triangle<T> &tri2) {
 
@@ -381,13 +319,13 @@ public:
   BVHNode<T> *left;
   BVHNode<T> *right;
   BVHNode<T> *parent;
-  // Stores the rightmost leaf node that can be reached from the current
-  // node.
+  
+  
   BVHNode<T> *rightmost;
 
   __host__ __device__ inline bool isLeaf() { return !left && !right; };
 
-  // The index of the object contained in the node
+  
   int idx;
 };
 
@@ -395,9 +333,9 @@ template <typename T> using BVHNodePtr = BVHNode<T> *;
 
 template <typename T>
 __device__
-#if FORCE_INLINE == 1
+
     __forceinline__
-#endif
+
     bool
     checkOverlap(const AABB<T> &bbox1, const AABB<T> &bbox2) {
   return (bbox1.min_t.x <= bbox2.max_t.x) && (bbox1.max_t.x >= bbox2.min_t.x) &&
@@ -411,49 +349,49 @@ __device__ int traverseBVH(long2 *collisionIndices, BVHNodePtr<T> root,
                            BVHNodePtr<T> leaf, int max_collisions,
                            int *counter) {
   int num_collisions = 0;
-  // Allocate traversal stack from thread-local memory,
-  // and push NULL to indicate that there are no postponed nodes.
-  BVHNodePtr<T> stack[STACK_SIZE];
+  
+  
+  BVHNodePtr<T> stack[64];
   BVHNodePtr<T> *stackPtr = stack;
-  *stackPtr++ = nullptr; // push
+  *stackPtr++ = nullptr; 
 
-  // Traverse nodes starting from the root.
+  
   BVHNodePtr<T> node = root;
   do {
-    // Check each child node for overlap.
+    
     BVHNodePtr<T> childL = node->left;
     BVHNodePtr<T> childR = node->right;
     bool overlapL = checkOverlap<T>(queryAABB, childL->bbox);
     bool overlapR = checkOverlap<T>(queryAABB, childR->bbox);
 
-#if COLLISION_ORDERING == 1
-    /*
-       If we do not impose any order, then all potential collisions will be
-       reported twice (i.e. the query object with the i-th colliding object
-       and the i-th colliding object with the query). In order to avoid
-       this, we impose an ordering, saying that an object can collide with
-       another only if it comes before it in the tree. For example, if we
-       are checking for the object 10, there is no need to check the subtree
-       that has the objects that are before it, since they will already have
-       been checked.
-    */
+
+    
+
+
+
+
+
+
+
+
+
     if (leaf >= childL->rightmost) {
       overlapL = false;
     }
     if (leaf >= childR->rightmost) {
       overlapR = false;
     }
-#endif
 
-    // Query overlaps a leaf node => report collision.
+
+    
     if (overlapL && childL->isLeaf()) {
-      // Append the collision to the main array
-      // Increase the number of detection collisions
-      // num_collisions++;
+      
+      
+      
       int coll_idx = atomicAdd(counter, 1);
       collisionIndices[coll_idx] =
-          // collisionIndices[num_collisions % max_collisions] =
-          // *collisionIndices++ =
+          
+          
           make_long2(min(queryObjectIdx, childL->idx),
                      max(queryObjectIdx, childL->idx));
       num_collisions++;
@@ -462,24 +400,24 @@ __device__ int traverseBVH(long2 *collisionIndices, BVHNodePtr<T> root,
     if (overlapR && childR->isLeaf()) {
       int coll_idx = atomicAdd(counter, 1);
       collisionIndices[coll_idx] = make_long2(
-          // min(queryObjectIdx, childR->idx),
-          // max(queryObjectIdx, childR->idx));
-          // collisionIndices[num_collisions % max_collisions] = make_long2(
+          
+          
+          
           min(queryObjectIdx, childR->idx), max(queryObjectIdx, childR->idx));
       num_collisions++;
     }
 
-    // Query overlaps an internal node => traverse.
+    
     bool traverseL = (overlapL && !childL->isLeaf());
     bool traverseR = (overlapR && !childR->isLeaf());
 
     if (!traverseL && !traverseR) {
-      node = *--stackPtr; // pop
+      node = *--stackPtr; 
     }
     else {
         node = (traverseL) ? childL : childR;
         if (traverseL && traverseR) {
-            *stackPtr++ = childR; // push
+            *stackPtr++ = childR; 
         }
     }
   } while (node != nullptr);
@@ -505,32 +443,32 @@ __global__ void findPotentialCollisions(long2 *collisionIndices,
   return;
 }
 
-// Expands a 10-bit integer into 30 bits
-// by inserting 2 zeros after each bit.
+
+
 __device__
-#if FORCE_INLINE == 1
+
     __forceinline__
-#endif
+
         MortonCode
         expandBits(MortonCode v) {
-  // Shift 16
+  
   v = (v * 0x00010001u) & 0xFF0000FFu;
-  // Shift 8
+  
   v = (v * 0x00000101u) & 0x0F00F00Fu;
-  // Shift 4
+  
   v = (v * 0x00000011u) & 0xC30C30C3u;
-  // Shift 2
+  
   v = (v * 0x00000005u) & 0x49249249u;
   return v;
 }
 
-// Calculates a 30-bit Morton code for the
-// given 3D point located within the unit cube [0,1].
+
+
 template <typename T>
 __device__
-#if FORCE_INLINE == 1
+
     __forceinline__
-#endif
+
         MortonCode
         morton3D(T x, T y, T z) {
   x = min(max(x * 1024.0f, 0.0f), 1023.0f);
@@ -548,7 +486,7 @@ __global__ void ComputeMortonCodes(Triangle<T> *triangles, int num_triangles,
                                    MortonCode *morton_codes) {
   int idx = threadIdx.x + blockDim.x * blockIdx.x;
   if (idx < num_triangles) {
-    // Fetch the current triangle
+    
     Triangle<T> tri = triangles[idx];
     vec3<T> centroid = (tri.v0 + tri.v1 + tri.v2) / (T)3.0;
 
@@ -565,14 +503,14 @@ __global__ void ComputeMortonCodes(Triangle<T> *triangles, int num_triangles,
 }
 
 __device__
-#if FORCE_INLINE == 1
+
     __forceinline__
-#endif
+
     int
     LongestCommonPrefix(int i, int j, MortonCode *morton_codes,
                         int num_triangles, int *triangle_ids) {
-  // This function will be called for i - 1, i, i + 1, so we might go beyond
-  // the array limits
+  
+  
   if (i < 0 || i > num_triangles - 1 || j < 0 || j > num_triangles - 1)
     return -1;
 
@@ -580,12 +518,12 @@ __device__
   MortonCode key2 = morton_codes[j];
 
   if (key1 == key2) {
-    // Duplicate key:__clzll(key1 ^ key2) will be equal to the number of
-    // bits in key[1, 2]. Add the number of leading zeros between the
-    // indices
+    
+    
+    
     return __clz(key1 ^ key2) + __clz(triangle_ids[i] ^ triangle_ids[j]);
   } else {
-    // Keys are different
+    
     return __clz(key1 ^ key2);
   }
 }
@@ -602,20 +540,20 @@ __global__ void BuildRadixTree(MortonCode *morton_codes, int num_triangles,
                                        num_triangles, triangle_ids);
   int delta_last = LongestCommonPrefix(idx, idx - 1, morton_codes,
                                        num_triangles, triangle_ids);
-  // Find the direction of the range
+  
   int direction = delta_next - delta_last >= 0 ? 1 : -1;
 
   int delta_min = LongestCommonPrefix(idx, idx - direction, morton_codes,
                                       num_triangles, triangle_ids);
 
-  // Do binary search to compute the upper bound for the length of the range
+  
   int lmax = 2;
   while (LongestCommonPrefix(idx, idx + lmax * direction, morton_codes,
                              num_triangles, triangle_ids) > delta_min) {
     lmax *= 2;
   }
 
-  // Use binary search to find the other end.
+  
   int l = 0;
   int divider = 2;
   for (int t = lmax / divider; t >= 1; divider *= 2) {
@@ -627,12 +565,12 @@ __global__ void BuildRadixTree(MortonCode *morton_codes, int num_triangles,
   }
   int j = idx + l * direction;
 
-  // Find the length of the longest common prefix for the current node
+  
   int node_delta =
       LongestCommonPrefix(idx, j, morton_codes, num_triangles, triangle_ids);
   int s = 0;
   divider = 2;
-  // Search for the split position using binary search.
+  
   for (int t = (l + (divider - 1)) / divider; t >= 1; divider *= 2) {
     if (LongestCommonPrefix(idx, idx + (s + t) * direction, morton_codes,
                             num_triangles, triangle_ids) > node_delta) {
@@ -640,10 +578,10 @@ __global__ void BuildRadixTree(MortonCode *morton_codes, int num_triangles,
     }
     t = (l + (divider - 1)) / divider;
   }
-  // gamma in the Karras paper
+  
   int split = idx + s * direction + min(direction, 0);
 
-  // Assign the parent and the left, right children for the current node
+  
   BVHNodePtr<T> curr_node = internal_nodes + idx;
   if (min(idx, j) == split) {
     curr_node->left = leaf_nodes + split;
@@ -671,46 +609,46 @@ __global__ void CreateHierarchy(BVHNodePtr<T> internal_nodes,
     return;
 
   BVHNodePtr<T> leaf = leaf_nodes + idx;
-  // Assign the index to the primitive
+  
   leaf->idx = triangle_ids[idx];
 
   Triangle<T> tri = triangles[triangle_ids[idx]];
-  // Assign the bounding box of the triangle to the leaves
+  
   leaf->bbox = tri.ComputeBBox();
   leaf->rightmost = leaf;
 
   BVHNodePtr<T> curr_node = leaf->parent;
   int current_idx = curr_node - internal_nodes;
 
-  // Increment the atomic counter
+  
   int curr_counter = atomicAdd(atomic_counters + current_idx, 1);
   while (true) {
-    // atomicAdd returns the old value at the specified address. Thus the
-    // first thread to reach this point will immediately return
+    
+    
     if (curr_counter == 0)
       break;
 
-    // Calculate the bounding box of the current node as the union of the
-    // bounding boxes of its children.
+    
+    
     AABB<T> left_bb = curr_node->left->bbox;
     AABB<T> right_bb = curr_node->right->bbox;
     curr_node->bbox = left_bb + right_bb;
-    // Store a pointer to the right most node that can be reached from this
-    // internal node.
+    
+    
     curr_node->rightmost =
         curr_node->left->rightmost > curr_node->right->rightmost
             ? curr_node->left->rightmost
             : curr_node->right->rightmost;
 
-    // If we have reached the root break
+    
     if (curr_node == internal_nodes)
       break;
 
-    // Proceed to the parent of the node
+    
     curr_node = curr_node->parent;
-    // Calculate its position in the flat array
+    
     current_idx = curr_node - internal_nodes;
-    // Update the visitation counter
+    
     curr_counter = atomicAdd(atomic_counters + current_idx, 1);
   }
 
@@ -723,197 +661,197 @@ void buildBVH(BVHNodePtr<T> internal_nodes, BVHNodePtr<T> leaf_nodes,
               thrust::device_vector<int> *triangle_ids, int num_triangles,
               int batch_size) {
 
-#if PRINT_TIMINGS == 1
-  // Create the CUDA events used to estimate the execution time of each
-  // kernel.
-  cudaEvent_t start, stop;
-  cudaEventCreate(&start);
-  cudaEventCreate(&stop);
-#endif
+
+
+
+
+
+
+
 
   thrust::device_vector<AABB<T>> bounding_boxes(num_triangles);
 
-  int blockSize = NUM_THREADS;
+  int blockSize = 128;
   int gridSize = (num_triangles + blockSize - 1) / blockSize;
-#if PRINT_TIMINGS == 1
-  cudaEventRecord(start);
-#endif
-  // Compute the bounding box for all the triangles
-#if DEBUG_PRINT == 1
-  std::cout << "Start computing triangle bounding boxes" << std::endl;
-#endif
+
+
+
+  
+
+
+
   ComputeTriBoundingBoxes<T><<<gridSize, blockSize>>>(
       triangles, num_triangles, bounding_boxes.data().get());
-#if PRINT_TIMINGS == 1
-  cudaEventRecord(stop);
-#endif
-
-  cudaCheckError();
-
-#if DEBUG_PRINT == 1
-  std::cout << "Finished computing triangle bounding_boxes" << std::endl;
-#endif
-
-#if PRINT_TIMINGS == 1
-  cudaEventSynchronize(stop);
-  float milliseconds = 0;
-  cudaEventElapsedTime(&milliseconds, start, stop);
-  std::cout << "Compute Triangle Bounding boxes = " << milliseconds << " (ms)"
-            << std::endl;
-#endif
-
-#if PRINT_TIMINGS == 1
-  cudaEventRecord(start);
-#endif
-  // Compute the union of all the bounding boxes
+
+
+
+
+  { cudaDeviceSynchronize(); cudaError_t e = cudaGetLastError(); if (e != cudaSuccess) { printf("Cuda failure %s:%d: '%s'\n", "bvh_cuda_op.cu", 730, cudaGetErrorString(e)); exit(0); } };
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+  
   AABB<T> host_scene_bb = thrust::reduce(
       bounding_boxes.begin(), bounding_boxes.end(), AABB<T>(), MergeAABB<T>());
-#if PRINT_TIMINGS == 1
-  cudaEventRecord(stop);
-#endif
-
-  cudaCheckError();
-
-#if DEBUG_PRINT == 1
-  std::cout << "Finished Calculating scene Bounding Box" << std::endl;
-#endif
-
-#if PRINT_TIMINGS == 1
-  cudaEventSynchronize(stop);
-  milliseconds = 0;
-  cudaEventElapsedTime(&milliseconds, start, stop);
-  std::cout << "Scene bounding box reduction = " << milliseconds << " (ms)"
-            << std::endl;
-#endif
-
-  // TODO: Custom reduction ?
-  // Copy the bounding box back to the GPU
+
+
+
+
+  { cudaDeviceSynchronize(); cudaError_t e = cudaGetLastError(); if (e != cudaSuccess) { printf("Cuda failure %s:%d: '%s'\n", "bvh_cuda_op.cu", 754, cudaGetErrorString(e)); exit(0); } };
+
+
+
+
+
+
+
+
+
+
+
+
+
+  
+  
   AABB<T> *scene_bb_ptr;
   cudaMalloc(&scene_bb_ptr, sizeof(AABB<T>));
   cudaMemcpy(scene_bb_ptr, &host_scene_bb, sizeof(AABB<T>),
              cudaMemcpyHostToDevice);
 
   thrust::device_vector<MortonCode> morton_codes(num_triangles);
-#if DEBUG_PRINT == 1
-  std::cout << "Start Morton Code calculation ..." << std::endl;
-#endif
-
-#if PRINT_TIMINGS == 1
-  cudaEventRecord(start);
-#endif
-  // Compute the morton codes for the centroids of all the primitives
+
+
+
+
+
+
+
+  
   ComputeMortonCodes<T><<<gridSize, blockSize>>>(
       triangles, num_triangles, scene_bb_ptr,
       morton_codes.data().get());
-#if PRINT_TIMINGS == 1
-  cudaEventRecord(stop);
-#endif
-
-  cudaCheckError();
-
-#if DEBUG_PRINT == 1
-  std::cout << "Finished calculating Morton Codes ..." << std::endl;
-#endif
-
-#if PRINT_TIMINGS == 1
-  cudaEventSynchronize(stop);
-  milliseconds = 0;
-  cudaEventElapsedTime(&milliseconds, start, stop);
-  std::cout << "Morton code calculation = " << milliseconds << " (ms)"
-            << std::endl;
-#endif
-
-#if DEBUG_PRINT == 1
-  std::cout << "Creating triangle ID sequence" << std::endl;
-#endif
-  // Construct an array of triangle ids.
+
+
+
+
+  { cudaDeviceSynchronize(); cudaError_t e = cudaGetLastError(); if (e != cudaSuccess) { printf("Cuda failure %s:%d: '%s'\n", "bvh_cuda_op.cu", 791, cudaGetErrorString(e)); exit(0); } };
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+  
   thrust::sequence(triangle_ids->begin(), triangle_ids->end());
-#if DEBUG_PRINT == 1
-  std::cout << "Finished creating triangle ID sequence ..." << std::endl;
-#endif
 
-  // Sort the triangles according to the morton code
-#if DEBUG_PRINT == 1
-  std::cout << "Starting Morton Code sorting!" << std::endl;
-#endif
+
+
+
+  
+
+
+
 
   try {
-#if PRINT_TIMINGS == 1
-    cudaEventRecord(start);
-#endif
+
+
+
     thrust::sort_by_key(morton_codes.begin(), morton_codes.end(),
                         triangle_ids->begin());
-#if PRINT_TIMINGS == 1
-    cudaEventRecord(stop);
-#endif
-#if DEBUG_PRINT == 1
-    std::cout << "Finished morton code sorting!" << std::endl;
-#endif
-#if PRINT_TIMINGS == 1
-    cudaEventSynchronize(stop);
-    milliseconds = 0;
-    cudaEventElapsedTime(&milliseconds, start, stop);
-    std::cout << "Morton code sorting = " << milliseconds << " (ms)"
-              << std::endl;
-#endif
+
+
+
+
+
+
+
+
+
+
+
+
+
   } catch (thrust::system_error e) {
     std::cout << "Error inside sort: " << e.what() << std::endl;
   }
 
-#if DEBUG_PRINT == 1
-  std::cout << "Start building radix tree" << std::endl;
-#endif
-#if PRINT_TIMINGS == 1
-  cudaEventRecord(start);
-#endif
-  // Construct the radix tree using the sorted morton code sequence
+
+
+
+
+
+
+  
   BuildRadixTree<T><<<gridSize, blockSize>>>(
       morton_codes.data().get(), num_triangles, triangle_ids->data().get(),
       internal_nodes, leaf_nodes);
-#if PRINT_TIMINGS == 1
-  cudaEventRecord(stop);
-#endif
-
-  cudaCheckError();
-
-#if DEBUG_PRINT == 1
-  std::cout << "Finished radix tree" << std::endl;
-#endif
-#if PRINT_TIMINGS == 1
-  cudaEventSynchronize(stop);
-  milliseconds = 0;
-  cudaEventElapsedTime(&milliseconds, start, stop);
-  std::cout << "Building radix tree = " << milliseconds << " (ms)" << std::endl;
-#endif
-  // Create an array that contains the atomic counters for each node in the
-  // tree
+
+
+
+
+  { cudaDeviceSynchronize(); cudaError_t e = cudaGetLastError(); if (e != cudaSuccess) { printf("Cuda failure %s:%d: '%s'\n", "bvh_cuda_op.cu", 856, cudaGetErrorString(e)); exit(0); } };
+
+
+
+
+
+
+
+
+
+
+  
+  
   thrust::device_vector<int> counters(num_triangles);
 
-#if DEBUG_PRINT == 1
-  std::cout << "Start Linear BVH generation" << std::endl;
-#endif
-  // Build the Bounding Volume Hierarchy in parallel from the leaves to the
-  // root
+
+
+
+  
+  
   CreateHierarchy<T><<<gridSize, blockSize>>>(
       internal_nodes, leaf_nodes, num_triangles, triangles,
       triangle_ids->data().get(), counters.data().get());
 
-  cudaCheckError();
+  { cudaDeviceSynchronize(); cudaError_t e = cudaGetLastError(); if (e != cudaSuccess) { printf("Cuda failure %s:%d: '%s'\n", "bvh_cuda_op.cu", 880, cudaGetErrorString(e)); exit(0); } };
+
+
+
+
+
+
+
+
+
+
+
+
+
 
-#if PRINT_TIMINGS == 1
-  cudaEventRecord(stop);
-#endif
-#if DEBUG_PRINT == 1
-  std::cout << "Finished with LBVH generation ..." << std::endl;
-#endif
 
-#if PRINT_TIMINGS == 1
-  cudaEventSynchronize(stop);
-  milliseconds = 0;
-  cudaEventElapsedTime(&milliseconds, start, stop);
-  std::cout << "Hierarchy generation = " << milliseconds << " (ms)"
-            << std::endl;
-#endif
 
   cudaFree(scene_bb_ptr);
   return;
@@ -926,22 +864,22 @@ void bvh_cuda_forward(at::Tensor triangles, at::Tensor *collision_tensor_ptr,
 
   thrust::device_vector<int> triangle_ids(num_triangles);
 
-  int blockSize = NUM_THREADS;
+  int blockSize = 128;
   int gridSize = (num_triangles + blockSize - 1) / blockSize;
 
   thrust::device_vector<long2> collisionIndices(num_triangles * max_collisions);
 
-#if PRINT_TIMINGS == 1
-  cudaEvent_t start, stop;
-  cudaEventCreate(&start);
-  cudaEventCreate(&stop);
-#endif
 
-  // int *counter;
+
+
+
+
+
+  
   thrust::device_vector<int> collision_idx_cnt(batch_size);
   thrust::fill(collision_idx_cnt.begin(), collision_idx_cnt.end(), 0);
 
-  // Construct the bvh tree
+  
   AT_DISPATCH_FLOATING_TYPES(
       triangles.type(), "bvh_tree_building", ([&] {
         thrust::device_vector<BVHNode<scalar_t>> leaf_nodes(num_triangles);
@@ -958,24 +896,24 @@ void bvh_cuda_forward(at::Tensor triangles, at::Tensor *collision_tensor_ptr,
           thrust::fill(collisionIndices.begin(), collisionIndices.end(),
                        make_long2(-1, -1));
 
-#if DEBUG_PRINT == 1
-          std::cout << "Start building BVH" << std::endl;
-#endif
+
+
+
           buildBVH<scalar_t>(internal_nodes.data().get(),
                              leaf_nodes.data().get(), triangles_ptr,
                              &triangle_ids, num_triangles, batch_size);
-#if DEBUG_PRINT == 1
-          std::cout << "Successfully built BVH" << std::endl;
-#endif
 
-#if DEBUG_PRINT == 1
-          std::cout << "Launching collision detection ..." << std::endl;
-#endif
 
-#if PRINT_TIMINGS == 1
-          cudaEventRecord(start);
-#endif
-          // std::cout << tmp[0].right->bbox << std::endl;
+
+
+
+
+
+
+
+
+
+          
 
           findPotentialCollisions<scalar_t><<<gridSize, blockSize>>>(
               collisionIndices.data().get(),
@@ -984,131 +922,131 @@ void bvh_cuda_forward(at::Tensor triangles, at::Tensor *collision_tensor_ptr,
               max_collisions, &collision_idx_cnt.data().get()[bidx]);
           cudaDeviceSynchronize();
 
-#if PRINT_TIMINGS == 1
-          cudaEventRecord(stop);
-#endif
-          cudaCheckError();
-#if DEBUG_PRINT == 1
-          std::cout << "AABB Collision detection finished ..." << std::endl;
-#endif
-
-#if PRINT_TIMINGS == 1
-          cudaEventSynchronize(stop);
-          float milliseconds = 0;
-          cudaEventElapsedTime(&milliseconds, start, stop);
-          std::cout << "FindPotentialCollisions = " << milliseconds << " (ms)"
-                    << std::endl;
-#endif
-
-      // Calculate the number of potential collisions
-#if DEBUG_PRINT == 1
-          std::cout << "Starting stream compaction to keep only valid"
-                    << " potential collisions" << std::endl;
-#endif
-
-#if PRINT_TIMINGS == 1
-          cudaEventRecord(start);
-#endif
+
+
+
+          { cudaDeviceSynchronize(); cudaError_t e = cudaGetLastError(); if (e != cudaSuccess) { printf("Cuda failure %s:%d: '%s'\n", "bvh_cuda_op.cu", 969, cudaGetErrorString(e)); exit(0); } };
+
+
+
+
+
+
+
+
+
+
+
+
+      
+
+
+
+
+
+
+
+
           int num_cand_collisions =
               thrust::reduce(thrust::make_transform_iterator(
                                  collisionIndices.begin(), is_valid_cnt()),
                              thrust::make_transform_iterator(
                                  collisionIndices.end(), is_valid_cnt()));
-#if PRINT_TIMINGS == 1
-          cudaEventRecord(stop);
-#endif
-#if DEBUG_PRINT == 1
-          std::cout << "Bounding box collisions detected = "
-                    << num_cand_collisions << std::endl;
-#endif
-
-#if PRINT_TIMINGS == 1
-          cudaEventSynchronize(stop);
-          milliseconds = 0;
-          cudaEventElapsedTime(&milliseconds, start, stop);
-          std::cout << "Count AABB collisions elapsed time = " << milliseconds
-                    << " (ms)" << std::endl;
-#endif
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
           if (num_cand_collisions > 0) {
 
-#if PRINT_TIMINGS == 1
-            cudaEventRecord(start);
-#endif
-            // Keep only the pairs of ids where a bounding box to bounding box
-            // collision was detected.
+
+
+
+            
+            
             thrust::device_vector<long2> collisions(num_cand_collisions,
                                                     make_long2(-1, -1));
             thrust::copy_if(collisionIndices.begin(), collisionIndices.end(),
                             collisions.begin(), is_valid_cnt());
 
-            cudaCheckError();
-#if PRINT_TIMINGS == 1
-            cudaEventRecord(stop);
-#endif
-#if PRINT_TIMINGS == 1
-            cudaEventSynchronize(stop);
-            milliseconds = 0;
-            cudaEventElapsedTime(&milliseconds, start, stop);
-            std::cout << "Stream compaction for AABB collisions copy elapsed"
-                      << " time = " << milliseconds << " (ms)" << std::endl;
-#endif
-
-#if DEBUG_PRINT == 1
-            std::cout << "Finished with stream compaction ..." << std::endl;
-#endif
-
-#if DEBUG_PRINT == 1
-            std::cout << "Check for triangle to triangle intersection ..."
-                      << std::endl;
-#endif
-
-#if PRINT_TIMINGS == 1
-            cudaEventRecord(start);
-#endif
+            { cudaDeviceSynchronize(); cudaError_t e = cudaGetLastError(); if (e != cudaSuccess) { printf("Cuda failure %s:%d: '%s'\n", "bvh_cuda_op.cu", 1023, cudaGetErrorString(e)); exit(0); } };
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
             int tri_grid_size =
                 (collisions.size() + blockSize - 1) / blockSize;
             checkTriangleIntersections<scalar_t><<<tri_grid_size, blockSize>>>(
                 collisions.data().get(), triangles_ptr, collisions.size(),
                 num_triangles);
-#if PRINT_TIMINGS == 1
-            cudaEventRecord(stop);
-#endif
-            cudaCheckError();
-
-#if DEBUG_PRINT == 1
-            std::cout << "Finished triangle to triangle intersection ..."
-                      << std::endl;
-#endif
-
-#if PRINT_TIMINGS == 1
-            cudaEventSynchronize(stop);
-            milliseconds = 0;
-            cudaEventElapsedTime(&milliseconds, start, stop);
-            std::cout << "Triangle-to-Triangle intersection tests elapsed"
-                      << " time = " << milliseconds << " (ms)" << std::endl;
-#endif
-
-#if PRINT_TIMINGS == 1
-            cudaEventRecord(start);
-#endif
-            long *dev_ptr = collision_tensor_ptr->data<long>();
+
+
+
+            { cudaDeviceSynchronize(); cudaError_t e = cudaGetLastError(); if (e != cudaSuccess) { printf("Cuda failure %s:%d: '%s'\n", "bvh_cuda_op.cu", 1055, cudaGetErrorString(e)); exit(0); } };
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+            int64_t *dev_ptr = collision_tensor_ptr->data<int64_t>();
             cudaMemcpy(dev_ptr + bidx * num_triangles * max_collisions * 2,
-                       (long *)collisions.data().get(),
-                       2 * collisions.size() * sizeof(long),
+                       (int64_t *)collisions.data().get(),
+                       2 * collisions.size() * sizeof(int64_t),
                        cudaMemcpyDeviceToDevice);
-            cudaCheckError();
-
-#if PRINT_TIMINGS == 1
-            cudaEventRecord(stop);
-#endif
-
-#if PRINT_TIMINGS == 1
-            cudaEventSynchronize(stop);
-            milliseconds = 0;
-            cudaEventElapsedTime(&milliseconds, start, stop);
-            std::cout << "Copy CUDA array to tensor " << milliseconds << " (ms)"
-                      << std::endl;
-#endif
+            { cudaDeviceSynchronize(); cudaError_t e = cudaGetLastError(); if (e != cudaSuccess) { printf("Cuda failure %s:%d: '%s'\n", "bvh_cuda_op.cu", 1078, cudaGetErrorString(e)); exit(0); } };
+
+
+
+
+
+
+
+
+
+
+
+
           }
         }
       }));
